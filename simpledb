#!/bin/bash

# TODO
#
# misc:
# readme

DPATH="/var/simpledb"
CURRENT="$DPATH/current"
ARCHIVE="$DPATH/archive"
DTOK="<<DTOK>>"

usage() {
	echo "$0:"
	echo "    -h - display help screen"
	echo "    -q - suppress output"
	echo "    -c <type> <dname> - create a new database, dname, with one of the following types, type:"
	echo "                    dict - key value pair database"
	echo "                    log - raw text as written"
	echo "    -s <dname> - set the database dname to the current database"
	echo "    -us - unset the current database"
	echo "    -d - delete current database"
	echo "    -p - print raw text of current database"
	echo "    -a - add entry to current database from stdin"
	echo "    -as - add entry to current database from passed in string"
	echo "    -cp <dir> - copy database file to directory"
	echo "    -ar - archive current database"
	echo "    -uar <dname> - unarchive database dname"
	echo "    -la - list archived databases"
	echo "    -g <type> <str> - get an entry from the current database (if the database supports the type of get)"
	echo "    -r <type> <str> - delete an entry from the current database (if the database supports the type of delete)"
	echo "    -gc - get current database name and type"
	echo "    -dt - print delimeter torken for dict type"
	exit 0
}

create_db() {
	type=$1
	dname=$2
	mkdir -p $DPATH
	touch "$DPATH/$dname.$type"
}

delete_db() {
	if [ -f $CURRENT ]; then
		path=$(readlink -f $CURRENT)
		rm -f $path
		unlink $CURRENT
	fi
}

_get_current_name() {
	local dname=""
	if [ -f $CURRENT ]; then
		path=$(readlink -f $CURRENT)
		name=$(basename $path)
		local dname=$(echo "$name" | cut -d '.' -f1)
	fi
	echo "$dname"
}

_get_current_type() {
	local type=""
	if [ -f $CURRENT ]; then
		path=$(readlink -f $CURRENT)
		name=$(basename $path)
		local type=$(echo "$name" | cut -d '.' -f2)
	fi
	echo "$type"
}

set_db() {
	dname=$1
	if [ -f $CURRENT ]; then
		unlink $CURRENT
	fi
	ln -s "$DPATH/$dname" $CURRENT
}

suppress_output() {
	exec 1>/dev/null
	exec 2>&1
}

list_dbs() {
	for file in $DPATH/*
	do
		if [ ! -f $file ]; then
			continue
		fi
		if [ "$file" == "$CURRENT" ]; then
			continue
		fi
		name=$(basename $file)
		echo "$name"
	done
}

alist_dbs() {
	for file in $ARCHIVE/*
	do
		if [ ! -f $file ]; then
			continue
		fi
		name=$(basename $file)
		echo "$name"
	done
}

print_db() {
	while :
	do
		if ! read line
		then
			break
		fi
		echo "$line"
	done < $CURRENT
}

_add_entry_to_log() {
	line=$1
	echo "$line" >> $CURRENT
}

_add_entry_to_dict() {
	line=$1
	key=$(_get_key "$line")
	val=$(_get_val "$line")
	if [ -z "$key" ]; then
		return
	fi
	if [ -z "$val" ]; then
		return
	fi
	echo "$line" >> $CURRENT
}

_add_entry_from_stdin() {
	while read line
	do
		type=$(_get_current_type)
		case $type in
			"log")
				_add_entry_to_log "$line"
				;;
			"dict")
				_add_entry_to_dict "$line"
				;;
			*)
				;;
		esac
	done < /dev/stdin
}

_add_entry_from_string() {
	str=$1
	type=$(_get_current_type)
	case $type in
		"log")
			_add_entry_to_log "$str"
			;;
		"dict")
			_add_entry_to_dict "$str"
			;;
		*)
			;;
	esac
}

add_entry() {
	str=$1
	if [ "$str" == "_STDIN" ]; then
		_add_entry_from_stdin
	else
		_add_entry_from_string "$str"
	fi
}

copy_db() {
	dirpath=$1
	dname=$(readlink -f $CURRENT)
	cp $dname $dirpath
}

archive_db() {
	dpath=$(readlink -f $CURRENT)
	dname=$(basename $dpath)
	mkdir -p $ARCHIVE
	mv $dpath $ARCHIVE/$dname
	if [ -f $CURRENT ]; then
		unlink $CURRENT
	fi
}

uarchive_db() {
	dname=$1
	mv $ARCHIVE/$dname $DPATH
}

_get_key() {
	line=$1
	awk '{split($0, a, "<<DTOK>>"); print a[1];}' <<< "$line"
}

_get_val() {
	line=$1
	awk '{split($0, a, "<<DTOK>>"); print a[2];}' <<< "$line"
}

_get_dict_by_key() {
	str=$1
	line=$2
	key=$(_get_key "$line")
	if [ "$key" == "$str" ]; then
		val=$(_get_val "$line")
		echo "$val"
	fi
}

_get_dict_by_rkey() {
	str=$1
	line=$2
	key=$(_get_key "$line")
	if echo "$key" | grep -q "$str"
	then
		val=$(_get_val "$line")
		echo "$val"
	fi
}

get_dict() {
	type=$1
	str=$2
	while :
	do
		if ! read line
		then
			break
		fi
		case $type in
			"key")
				_get_dict_by_key "$str" "$line"
				;;
			"rkey")
				_get_dict_by_rkey "$str" "$line"
				;;
		esac
	done < $CURRENT
}

remove_dict() {
	type=$1
	str=$2
	path=$(readlink -f $CURRENT)
	case $type in
		"key")
			sed -i "/^$str$DTOK/d" $path
			;;
		"rkey")
			sed -ir "/^.*$str.*$DTOK/d" $path
			;;
	esac
}

#
## Main
#

while (($#)) 
do
	case $1 in
		"-h")
			usage
			;;
		"-c")
                        shift
			type=$1
			shift
			dname=$1
			if [ -z "$type" ]; then
				echo "database type not provided"
				exit 20
			fi
			if [ -z $dname ]; then
				echo "database name not provided"
				exit 22
			fi
			if [ -f "$DPATH/$dname.$type" ]; then
				echo "database already exists"
				exit 1
			fi
			if [ "$type" != "dict" ] && \
			   [ "$type" != "log" ]; then
				echo "given type does not match a known type"
				exit 23
			fi
			create_db $type $dname
			;;
		"-d")
			if [ ! -f $CURRENT ]; then
				echo "current database not set"
				exit 2
			fi
			delete_db
			;;
		"-s")
			shift
			dname=$1
			if [ ! -f "$DPATH/$dname" ]; then
				echo "database does not exist"
				exit 3
			fi
			set_db $dname
			;;
		"-us")
			if [ ! -f $CURRENT ]; then
				echo "current database not set"
				exit 2
			fi
			unlink $CURRENT
			;;
		"-q")
			suppress_output
			;;
		"-l")
			list_dbs
			;;
		"-p")
			if [ ! -f $CURRENT ]; then
				echo "current database not set"
				exit 2
			fi
			print_db
			;;
		"-a")
			if [ ! -f $CURRENT ]; then
				echo "current database not set"
				exit 2
			fi
			add_entry $dname "_STDIN"
			;;
		"-as")
			shift
			entry=$1
			if [ -z "$entry" ]; then
				echo "no string provided"
				exit 21
			fi
			if [ ! -f $CURRENT ]; then
				echo "current database not set"
				exit 2
			fi
			add_entry "$entry"
			;;
		"-cp")
			shift
			dirpath=$1
			if [ ! -d "$dirpath" ]; then
				echo "location does not exist"
				exit 4
			fi
			if [ ! -f $CURRENT ]; then
				echo "current database not set"
				exit 2
			fi
			copy_db "$dirpath"
			;;
		"-ar")
			if [ ! -f $CURRENT ]; then
				echo "current database not set"
				exit 2
			fi
			dpath=$(readlink -f $CURRENT)
			dname=$(basename $dpath)
			if [ -f "$ARCHIVE/$dname" ]; then
				echo "database already archived"
				exit 5
			fi
			archive_db
			;;
		"-uar")
			shift
			dname=$1
			if [ -f "$DPATH/$dname" ]; then
				echo "database already exists"
				exit 1
			fi
			if [ ! -f "$ARCHIVE/$dname" ]; then
				echo "database not archived"
				exit 6
			fi
			uarchive_db $dname
			;;
		"-la")
			alist_dbs
			;;
		"-g")
			shift
			type=$1
			shift
			str=$1
			if [ -z "$type" ]; then
				echo "database type not given"
				exit 20
			fi
			if [ -z "$str" ]; then
				echo "no string provided"
				exit 21
			fi
			if [ ! -f $CURRENT ]; then
				echo "current database not set"
				exit 2
			fi
			dname=$(_get_current_name)
			ctype=$(_get_current_type)
			case $ctype in
				"log")
					echo "log type does not support get"
					exit 24
					;;
				"dict")
					get_dict "$type" "$str"
					;;
				*)
					;;
			esac
			;;
		"-r")
			shift
			type=$1
			shift
			str=$1
			if [ -z "$type" ]; then
				echo "database type not given"
				exit 20
			fi
			if [ -z "$str" ]; then
				echo "no string provided"
				exit 21
			fi
			if [ ! -f $CURRENT ]; then
				echo "current database not set"
				exit 2
			fi
			dname=$(_get_current_name)
			ctype=$(_get_current_type)
			case $ctype in
				"log")
					echo "log type does not support remove"
					exit 25
					;;
				"dict")
					remove_dict "$type" "$str"
					;;
				*)
					;;
			esac
			;;
		"-gc") 
			if  [ ! -f $CURRENT ]; then
				echo "current database not set"
				exit 2
			fi
			dname=$(_get_current_name)
			ctype=$(_get_current_type)
			db=$(echo "$dname $ctype" | sed 's/ /./g')
			echo "$db"
			;;
		"-pt")
			echo "$DTOK"
			;;
		*)
			echo "unknown arg: $1"
			exit 1
			;;
	esac
	shift
done

